* struct partial move example
:PROPERTIES:
:CUSTOM_ID: struct-partial-move-example
:END:
copy from
[[https://doc.rust-lang.org/rust-by-example/scope/move/partial_move.html][Partial
moves]]

see
[[https://whileydave.com/2020/11/30/understanding-partial-moves-in-rust/][Understanding
Partial Moves in Rust]]

also see
[[https://zhuanlan.zhihu.com/p/325898830][理解Rust中的局部移动]]

#+begin_quote

#+begin_quote

#+begin_quote
Thus far, we've looked at moving an entire variable at a time (e.g. from
p to q above). However, we can also perform a partial move whereby only
part of a given variable is moved. Suppose now that our variable p is
actually a pair where each element contains an owning reference. Then,
we can move the second element of p into some other variable q as
follows:

#+end_quote

#+end_quote

#+end_quote

目前为止，我已经看到了一次性移动（move）整个变量（例如，上面中从p移动到q）。此外，我们还可以执行一个局部移动（partial
move），在局部移动（partial
move）中，可以仅移动（move）给定变量的一部分内容。假定现在我们的变量p是一个pair，其中每个元素包含一个持有所有权的引用。然后，我们可以把p中的第二个元素移动到另一个变量q中，

What is interesting about this case is that, unlike before, variable p
can still be used in a limited way even though part of it has been
voided. Specifically, we can use p.0 but we cannot use p.1. Furthermore,
Rust prevents us from copying or moving variable p as a whole (though,
to my mind, that seems somewhat unnecessary). Putting the above into
code looks like this:

这个例子的有趣之处在于，不同于之前的情况，尽管变量p的一部分内容已经失效，但它仍然可以以一种受限的方式被使用。具体来讲，我们可以使用p.0但是不能使用p.1。此外，Rust阻止我们对变量p进行整个的拷贝（copy）或移动（move）（尽管在我看来，这并没有必要）。上面的示例转为代码，如下：

#+begin_src rust
fn main() {
    let mut x = 123;
    let mut y = 456;
    let mut p = (&mut x,&mut y);
    let mut q = p.1;
    ...
}
#+end_src

At this point, everything is fine. However, replacing the ... with
e.g. let mut z = p; and we get the following error message:
目前为止，一切都好。但是，当对...进行替换， 比如替换为let mut z =
p;时，我们会得到下面的错误信息：

This is simply telling us that we cannot use a value which has been
voided by some previous move.
只是简单地告诉我们，我们不能使用一个由于之前的移动（move）操作而已经失效的值。
