// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 25.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `counter_number.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:counter_number.ReadRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadRequest {
    // message fields
    // @@protoc_insertion_point(field:counter_number.ReadRequest.letter)
    pub letter: ::std::string::String,
    // @@protoc_insertion_point(field:counter_number.ReadRequest.before_number)
    pub before_number: i32,
    // @@protoc_insertion_point(field:counter_number.ReadRequest.dummy_one)
    pub dummy_one: u32,
    // @@protoc_insertion_point(field:counter_number.ReadRequest.dummy_two)
    pub dummy_two: ::protobuf::MessageField<SampleSchema>,
    // @@protoc_insertion_point(field:counter_number.ReadRequest.dummy_three)
    pub dummy_three: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:counter_number.ReadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "letter",
            |m: &ReadRequest| { &m.letter },
            |m: &mut ReadRequest| { &mut m.letter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "before_number",
            |m: &ReadRequest| { &m.before_number },
            |m: &mut ReadRequest| { &mut m.before_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dummy_one",
            |m: &ReadRequest| { &m.dummy_one },
            |m: &mut ReadRequest| { &mut m.dummy_one },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SampleSchema>(
            "dummy_two",
            |m: &ReadRequest| { &m.dummy_two },
            |m: &mut ReadRequest| { &mut m.dummy_two },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dummy_three",
            |m: &ReadRequest| { &m.dummy_three },
            |m: &mut ReadRequest| { &mut m.dummy_three },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadRequest>(
            "ReadRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadRequest {
    const NAME: &'static str = "ReadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.letter = is.read_string()?;
                },
                16 => {
                    self.before_number = is.read_int32()?;
                },
                24 => {
                    self.dummy_one = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.dummy_two)?;
                },
                42 => {
                    is.read_repeated_packed_int32_into(&mut self.dummy_three)?;
                },
                40 => {
                    self.dummy_three.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.letter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.letter);
        }
        if self.before_number != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.before_number);
        }
        if self.dummy_one != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.dummy_one);
        }
        if let Some(v) = self.dummy_two.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.dummy_three {
            my_size += ::protobuf::rt::int32_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.letter.is_empty() {
            os.write_string(1, &self.letter)?;
        }
        if self.before_number != 0 {
            os.write_int32(2, self.before_number)?;
        }
        if self.dummy_one != 0 {
            os.write_uint32(3, self.dummy_one)?;
        }
        if let Some(v) = self.dummy_two.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.dummy_three {
            os.write_int32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn clear(&mut self) {
        self.letter.clear();
        self.before_number = 0;
        self.dummy_one = 0;
        self.dummy_two.clear();
        self.dummy_three.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadRequest {
        static instance: ReadRequest = ReadRequest {
            letter: ::std::string::String::new(),
            before_number: 0,
            dummy_one: 0,
            dummy_two: ::protobuf::MessageField::none(),
            dummy_three: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:counter_number.ReadResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadResponse {
    // message fields
    // @@protoc_insertion_point(field:counter_number.ReadResponse.after_number)
    pub after_number: i32,
    // @@protoc_insertion_point(field:counter_number.ReadResponse.dummy_one)
    pub dummy_one: u32,
    // @@protoc_insertion_point(field:counter_number.ReadResponse.dummy_two)
    pub dummy_two: ::protobuf::MessageField<SampleSchema>,
    // @@protoc_insertion_point(field:counter_number.ReadResponse.dummy_three)
    pub dummy_three: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:counter_number.ReadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "after_number",
            |m: &ReadResponse| { &m.after_number },
            |m: &mut ReadResponse| { &mut m.after_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dummy_one",
            |m: &ReadResponse| { &m.dummy_one },
            |m: &mut ReadResponse| { &mut m.dummy_one },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SampleSchema>(
            "dummy_two",
            |m: &ReadResponse| { &m.dummy_two },
            |m: &mut ReadResponse| { &mut m.dummy_two },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dummy_three",
            |m: &ReadResponse| { &m.dummy_three },
            |m: &mut ReadResponse| { &mut m.dummy_three },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadResponse>(
            "ReadResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadResponse {
    const NAME: &'static str = "ReadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.after_number = is.read_int32()?;
                },
                16 => {
                    self.dummy_one = is.read_uint32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.dummy_two)?;
                },
                34 => {
                    is.read_repeated_packed_int32_into(&mut self.dummy_three)?;
                },
                32 => {
                    self.dummy_three.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.after_number != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.after_number);
        }
        if self.dummy_one != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.dummy_one);
        }
        if let Some(v) = self.dummy_two.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.dummy_three {
            my_size += ::protobuf::rt::int32_size(4, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.after_number != 0 {
            os.write_int32(1, self.after_number)?;
        }
        if self.dummy_one != 0 {
            os.write_uint32(2, self.dummy_one)?;
        }
        if let Some(v) = self.dummy_two.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.dummy_three {
            os.write_int32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn clear(&mut self) {
        self.after_number = 0;
        self.dummy_one = 0;
        self.dummy_two.clear();
        self.dummy_three.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadResponse {
        static instance: ReadResponse = ReadResponse {
            after_number: 0,
            dummy_one: 0,
            dummy_two: ::protobuf::MessageField::none(),
            dummy_three: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:counter_number.SampleSchema)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SampleSchema {
    // message fields
    // @@protoc_insertion_point(field:counter_number.SampleSchema.sample_field_one)
    pub sample_field_one: bool,
    // @@protoc_insertion_point(field:counter_number.SampleSchema.sample_field_two)
    pub sample_field_two: bool,
    // special fields
    // @@protoc_insertion_point(special_field:counter_number.SampleSchema.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SampleSchema {
    fn default() -> &'a SampleSchema {
        <SampleSchema as ::protobuf::Message>::default_instance()
    }
}

impl SampleSchema {
    pub fn new() -> SampleSchema {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_field_one",
            |m: &SampleSchema| { &m.sample_field_one },
            |m: &mut SampleSchema| { &mut m.sample_field_one },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_field_two",
            |m: &SampleSchema| { &m.sample_field_two },
            |m: &mut SampleSchema| { &mut m.sample_field_two },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SampleSchema>(
            "SampleSchema",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SampleSchema {
    const NAME: &'static str = "SampleSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sample_field_one = is.read_bool()?;
                },
                16 => {
                    self.sample_field_two = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sample_field_one != false {
            my_size += 1 + 1;
        }
        if self.sample_field_two != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sample_field_one != false {
            os.write_bool(1, self.sample_field_one)?;
        }
        if self.sample_field_two != false {
            os.write_bool(2, self.sample_field_two)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SampleSchema {
        SampleSchema::new()
    }

    fn clear(&mut self) {
        self.sample_field_one = false;
        self.sample_field_two = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SampleSchema {
        static instance: SampleSchema = SampleSchema {
            sample_field_one: false,
            sample_field_two: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SampleSchema {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SampleSchema").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SampleSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SampleSchema {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14counter_number.proto\x12\x0ecounter_number\"\xc3\x01\n\x0bReadRequ\
    est\x12\x16\n\x06letter\x18\x01\x20\x01(\tR\x06letter\x12#\n\rbefore_num\
    ber\x18\x02\x20\x01(\x05R\x0cbeforeNumber\x12\x1b\n\tdummy_one\x18\x03\
    \x20\x01(\rR\x08dummyOne\x129\n\tdummy_two\x18\x04\x20\x01(\x0b2\x1c.cou\
    nter_number.SampleSchemaR\x08dummyTwo\x12\x1f\n\x0bdummy_three\x18\x05\
    \x20\x03(\x05R\ndummyThree\"\xaa\x01\n\x0cReadResponse\x12!\n\x0cafter_n\
    umber\x18\x01\x20\x01(\x05R\x0bafterNumber\x12\x1b\n\tdummy_one\x18\x02\
    \x20\x01(\rR\x08dummyOne\x129\n\tdummy_two\x18\x03\x20\x01(\x0b2\x1c.cou\
    nter_number.SampleSchemaR\x08dummyTwo\x12\x1f\n\x0bdummy_three\x18\x04\
    \x20\x03(\x05R\ndummyThree\"b\n\x0cSampleSchema\x12(\n\x10sample_field_o\
    ne\x18\x01\x20\x01(\x08R\x0esampleFieldOne\x12(\n\x10sample_field_two\
    \x18\x02\x20\x01(\x08R\x0esampleFieldTwob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(ReadRequest::generated_message_descriptor_data());
            messages.push(ReadResponse::generated_message_descriptor_data());
            messages.push(SampleSchema::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
