This guide is for reference only, please check the latest information on
getting starting with Substrate
[[https://docs.substrate.io/v3/getting-started/installation/][here]].

This page will guide you through the *2 steps* needed to prepare a
computer for *Substrate* development. Since Substrate is built with
[[https://www.rust-lang.org/][the Rust programming language]], the first
thing you will need to do is prepare the computer for Rust development -
these steps will vary based on the computer's operating system. Once
Rust is configured, you will use its toolchains to interact with Rust
projects; the commands for Rust's toolchains will be the same for all
supported, Unix-based operating systems.

** Build dependencies
:PROPERTIES:
:CUSTOM_ID: build-dependencies
:END:
Substrate development is easiest on Unix-based operating systems like
macOS or Linux. The examples in the
[[https://docs.substrate.io][Substrate Docs]] use Unix-style terminals
to demonstrate how to interact with Substrate from the command line.

*** Ubuntu/Debian
:PROPERTIES:
:CUSTOM_ID: ubuntudebian
:END:
Use a terminal shell to execute the following commands:

#+begin_src sh
sudo apt update
# May prompt for location information
sudo apt install -y git clang curl libssl-dev llvm libudev-dev
#+end_src

*** Arch Linux
:PROPERTIES:
:CUSTOM_ID: arch-linux
:END:
Run these commands from a terminal:

#+begin_src sh
pacman -Syu --needed --noconfirm curl git clang
#+end_src

*** Fedora
:PROPERTIES:
:CUSTOM_ID: fedora
:END:
Run these commands from a terminal:

#+begin_src sh
sudo dnf update
sudo dnf install clang curl git openssl-devel
#+end_src

*** OpenSUSE
:PROPERTIES:
:CUSTOM_ID: opensuse
:END:
Run these commands from a terminal:

#+begin_src sh
sudo zypper install clang curl git openssl-devel llvm-devel libudev-devel
#+end_src

*** macOS
:PROPERTIES:
:CUSTOM_ID: macos
:END:

#+begin_quote
*Apple M1 ARM* If you have an Apple M1 ARM system on a chip, make sure
that you have Apple Rosetta 2 installed through
=softwareupdate --install-rosetta=. This is only needed to run the
=protoc= tool during the build. The build itself and the target binaries
would remain native.

#+end_quote

Open the Terminal application and execute the following commands:

#+begin_src sh
# Install Homebrew if necessary https://brew.sh/
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

# Make sure Homebrew is up-to-date, install openssl
brew update
brew install openssl
#+end_src

*** Windows
:PROPERTIES:
:CUSTOM_ID: windows
:END:
*/PLEASE NOTE:/* Native development of Substrate is /not/ very well
supported! It is /highly/ recommend to use
[[https://docs.microsoft.com/en-us/windows/wsl/install-win10][Windows
Subsystem Linux]] (WSL) and follow the instructions for
[[#ubuntudebian][Ubuntu/Debian]]. Please refer to the separate
[[https://docs.substrate.io/v3/getting-started/windows-users/][guide for
native Windows development]].

** Rust developer environment
:PROPERTIES:
:CUSTOM_ID: rust-developer-environment
:END:
This guide uses [[https://rustup.rs]] installer and the =rustup= tool to
manage the Rust toolchain. First install and configure =rustup=:

#+begin_src sh
# Install
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
# Configure
source ~/.cargo/env
#+end_src

Configure the Rust toolchain to default to the latest stable version,
add nightly and the nightly wasm target:

#+begin_src sh
rustup default stable
rustup update
rustup update nightly
rustup target add wasm32-unknown-unknown --toolchain nightly
#+end_src

** Test your set-up
:PROPERTIES:
:CUSTOM_ID: test-your-set-up
:END:
Now the best way to ensure that you have successfully prepared a
computer for Substrate development is to follow the steps in
[[https://docs.substrate.io/tutorials/v3/create-your-first-substrate-chain/][our
first Substrate tutorial]].

** Troubleshooting Substrate builds
:PROPERTIES:
:CUSTOM_ID: troubleshooting-substrate-builds
:END:
Sometimes you can't get the Substrate node template to compile out of
the box. Here are some tips to help you work through that.

*** Rust configuration check
:PROPERTIES:
:CUSTOM_ID: rust-configuration-check
:END:
To see what Rust toolchain you are presently using, run:

#+begin_src sh
rustup show
#+end_src

This will show something like this (Ubuntu example) output:

#+begin_src text
Default host: x86_64-unknown-linux-gnu
rustup home:  /home/user/.rustup

installed toolchains
--------------------

stable-x86_64-unknown-linux-gnu (default)
nightly-2020-10-06-x86_64-unknown-linux-gnu
nightly-x86_64-unknown-linux-gnu

installed targets for active toolchain
--------------------------------------

wasm32-unknown-unknown
x86_64-unknown-linux-gnu

active toolchain
----------------

stable-x86_64-unknown-linux-gnu (default)
rustc 1.50.0 (cb75ad5db 2021-02-10)
#+end_src

As you can see above, the default toolchain is stable, and the
=nightly-x86_64-unknown-linux-gnu= toolchain as well as its
=wasm32-unknown-unknown= target is installed. You also see that
=nightly-2020-10-06-x86_64-unknown-linux-gnu= is installed, but is not
used unless explicitly defined as illustrated in the
[[#specifying-nightly-version][specify your nightly version]] section.

*** WebAssembly compilation
:PROPERTIES:
:CUSTOM_ID: webassembly-compilation
:END:
Substrate uses [[https://webassembly.org][WebAssembly]] (Wasm) to
produce portable blockchain runtimes. You will need to configure your
Rust compiler to use
[[https://doc.rust-lang.org/book/appendix-07-nightly-rust.html][=nightly=
builds]] to allow you to compile Substrate runtime code to the Wasm
target.

#+begin_quote
There are upstream issues in Rust that need to be resolved before all of
Substrate can use the stable Rust toolchain.
[[https://github.com/paritytech/substrate/issues/1252][This is our
tracking issue]] if you're curious as to why and how this will be
resolved.

#+end_quote

**** Latest nightly for Substrate =master=
:PROPERTIES:
:CUSTOM_ID: latest-nightly-for-substrate-master
:END:
Developers who are building Substrate /itself/ should always use the
latest bug-free versions of Rust stable and nightly. This is because the
Substrate codebase follows the tip of Rust nightly, which means that
changes in Substrate often depend on upstream changes in the Rust
nightly compiler. To ensure your Rust compiler is always up to date, you
should run:

#+begin_src sh
rustup update
rustup update nightly
rustup target add wasm32-unknown-unknown --toolchain nightly
#+end_src

#+begin_quote
NOTE: It may be necessary to occasionally rerun =rustup update= if a
change in the upstream Substrate codebase depends on a new feature of
the Rust compiler. When you do this, both your nightly and stable
toolchains will be pulled to the most recent release, and for nightly,
it is generally /not/ expected to compile WASM without error (although
it very often does). Be sure to [[#specifying-nightly-version][specify
your nightly version]] if you get WASM build errors from =rustup= and
[[#downgrading-rust-nightly][downgrade nightly as needed]].

#+end_quote

**** Rust nightly toolchain
:PROPERTIES:
:CUSTOM_ID: rust-nightly-toolchain
:END:
If you want to guarantee that your build works on your computer as you
update Rust and other dependencies, you should use a specific Rust
nightly version that is known to be compatible with the version of
Substrate they are using; this version will vary from project to project
and different projects may use different mechanisms to communicate this
version to developers. For instance, the Polkadot client specifies this
information in its
[[https://github.com/paritytech/polkadot/releases][release notes]].

#+begin_src sh
# Specify the specific nightly toolchain in the date below:
rustup install nightly-<yyyy-MM-dd>
#+end_src

**** Wasm toolchain
:PROPERTIES:
:CUSTOM_ID: wasm-toolchain
:END:
Now, configure the nightly version to work with the Wasm compilation
target:

#+begin_src sh
rustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>
#+end_src

*** Specifying nightly version
:PROPERTIES:
:CUSTOM_ID: specifying-nightly-version
:END:
Use the =WASM_BUILD_TOOLCHAIN= environment variable to specify the Rust
nightly version a Substrate project should use for Wasm compilation:

#+begin_src sh
WASM_BUILD_TOOLCHAIN=nightly-<yyyy-MM-dd> cargo build --release
#+end_src

#+begin_quote
Note that this only builds /the runtime/ with the specified nightly. The
rest of project will be compiled with *your default toolchain*, i.e.Â the
latest installed stable toolchain.

#+end_quote

*** Downgrading Rust nightly
:PROPERTIES:
:CUSTOM_ID: downgrading-rust-nightly
:END:
If your computer is configured to use the latest Rust nightly and you
would like to downgrade to a specific nightly version, follow these
steps:

#+begin_src sh
rustup uninstall nightly
rustup install nightly-<yyyy-MM-dd>
rustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>
#+end_src
