* Substrate Node Template
:PROPERTIES:
:CUSTOM_ID: substrate-node-template
:END:
[[https://docs.substrate.io/playground/][[[https://img.shields.io/badge/Playground-Node_Template-brightgreen?logo=Parity%20Substrate]]]]
[[https://matrix.to/#/#substrate-technical:matrix.org][[[https://img.shields.io/matrix/substrate-technical:matrix.org]]]]

A fresh FRAME-based [[https://www.substrate.io/][Substrate]] node, ready
for hacking :rocket:

** Getting Started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:
Follow the steps below to get started with the Node Template, or get it
up and running right from your browser in just a few clicks using the
[[https://docs.substrate.io/playground/][Substrate Playground]]
:hammer_and_wrench:

*** Using Nix
:PROPERTIES:
:CUSTOM_ID: using-nix
:END:
Install [[https://nixos.org/][nix]] and optionally
[[https://github.com/direnv/direnv][direnv]] and
[[https://github.com/target/lorri][lorri]] for a fully plug and play
experience for setting up the development environment. To get all the
correct dependencies activate direnv =direnv allow= and lorri
=lorri shell=.

*** Rust Setup
:PROPERTIES:
:CUSTOM_ID: rust-setup
:END:
First, complete the [[./docs/rust-setup.md][basic Rust setup
instructions]].

*** Run
:PROPERTIES:
:CUSTOM_ID: run
:END:
Use Rust's native =cargo= command to build and launch the template node:

#+begin_src sh
cargo run --release -- --dev
#+end_src

*** Build
:PROPERTIES:
:CUSTOM_ID: build
:END:
The =cargo run= command will perform an initial build. Use the following
command to build the node without launching it:

#+begin_src sh
cargo build --release
#+end_src

*** Embedded Docs
:PROPERTIES:
:CUSTOM_ID: embedded-docs
:END:
Once the project has been built, the following command can be used to
explore all parameters and subcommands:

#+begin_src sh
./target/release/node-template -h
#+end_src

** Run
:PROPERTIES:
:CUSTOM_ID: run-1
:END:
The provided =cargo run= command will launch a temporary node and its
state will be discarded after you terminate the process. After the
project has been built, there are other ways to launch the node.

*** Single-Node Development Chain
:PROPERTIES:
:CUSTOM_ID: single-node-development-chain
:END:
This command will start the single-node development chain with
non-persistent state:

#+begin_src sh
./target/release/node-template --dev
#+end_src

Purge the development chain's state:

#+begin_src sh
./target/release/node-template purge-chain --dev
#+end_src

Start the development chain with detailed logging:

#+begin_src sh
RUST_BACKTRACE=1 ./target/release/node-template -ldebug --dev
#+end_src

#+begin_quote
Development chain means that the state of our chain will be in a tmp
folder while the nodes are running. Also, *alice* account will be
authority and sudo account as declared in the
[[https://github.com/substrate-developer-hub/substrate-node-template/blob/main/node/src/chain_spec.rs#L49][genesis
state]]. At the same time the following accounts will be pre-funded: -
Alice - Bob - Alice//stash - Bob//stash

#+end_quote

In case of being interested in maintaining the chain' state between runs
a base path must be added so the db can be stored in the provided folder
instead of a temporal one. We could use this folder to store different
chain databases, as a different folder will be created per different
chain that is ran. The following commands shows how to use a newly
created folder as our db base path.

#+begin_src sh
// Create a folder to use as the db base path
$ mkdir my-chain-state

// Use of that folder to store the chain state
$ ./target/release/node-template --dev --base-path ./my-chain-state/

// Check the folder structure created inside the base path after running the chain
$ ls ./my-chain-state
chains
$ ls ./my-chain-state/chains/
dev
$ ls ./my-chain-state/chains/dev
db keystore network
#+end_src

*** Connect with Polkadot-JS Apps Front-end
:PROPERTIES:
:CUSTOM_ID: connect-with-polkadot-js-apps-front-end
:END:
Once the node template is running locally, you can connect it with
*Polkadot-JS Apps* front-end to interact with your chain.
[[https://polkadot.js.org/apps/#/explorer?rpc=ws://localhost:9944][Click
here]] connecting the Apps to your local node template.

*** Multi-Node Local Testnet
:PROPERTIES:
:CUSTOM_ID: multi-node-local-testnet
:END:
If you want to see the multi-node consensus algorithm in action, refer
to our [[https://docs.substrate.io/tutorials/v3/private-network][Start a
Private Network tutorial]].

** Template Structure
:PROPERTIES:
:CUSTOM_ID: template-structure
:END:
A Substrate project such as this consists of a number of components that
are spread across a few directories.

*** Node
:PROPERTIES:
:CUSTOM_ID: node
:END:
A blockchain node is an application that allows users to participate in
a blockchain network. Substrate-based blockchain nodes expose a number
of capabilities:

- Networking: Substrate nodes use the [[https://libp2p.io/][=libp2p=]]
  networking stack to allow the nodes in the network to communicate with
  one another.
- Consensus: Blockchains must have a way to come to
  [[https://docs.substrate.io/v3/advanced/consensus][consensus]] on the
  state of the network. Substrate makes it possible to supply custom
  consensus engines and also ships with several consensus mechanisms
  that have been built on top of
  [[https://research.web3.foundation/en/latest/polkadot/NPoS/index.html][Web3
  Foundation research]].
- RPC Server: A remote procedure call (RPC) server is used to interact
  with Substrate nodes.

There are several files in the =node= directory - take special note of
the following:

- [[./node/src/chain_spec.rs][=chain_spec.rs=]]: A
  [[https://docs.substrate.io/v3/runtime/chain-specs][chain
  specification]] is a source code file that defines a Substrate chain's
  initial (genesis) state. Chain specifications are useful for
  development and testing, and critical when architecting the launch of
  a production chain. Take note of the =development_config= and
  =testnet_genesis= functions, which are used to define the genesis
  state for the local development chain configuration. These functions
  identify some
  [[https://docs.substrate.io/v3/tools/subkey#well-known-keys][well-known
  accounts]] and use them to configure the blockchain's initial state.
- [[./node/src/service.rs][=service.rs=]]: This file defines the node
  implementation. Take note of the libraries that this file imports and
  the names of the functions it invokes. In particular, there are
  references to consensus-related topics, such as the
  [[https://docs.substrate.io/v3/advanced/consensus#longest-chain-rule][longest
  chain rule]], the
  [[https://docs.substrate.io/v3/advanced/consensus#aura][Aura]] block
  authoring mechanism and the
  [[https://docs.substrate.io/v3/advanced/consensus#grandpa][GRANDPA]]
  finality gadget.

After the node has been [[#build][built]], refer to the embedded
documentation to learn more about the capabilities and configuration
parameters that it exposes:

#+begin_src shell
./target/release/node-template --help
#+end_src

*** Runtime
:PROPERTIES:
:CUSTOM_ID: runtime
:END:
In Substrate, the terms
"[[https://docs.substrate.io/v3/getting-started/glossary#runtime][runtime]]"
and
"[[https://docs.substrate.io/v3/getting-started/glossary#state-transition-function-stf][state
transition function]]" are analogous - they refer to the core logic of
the blockchain that is responsible for validating blocks and executing
the state changes they define. The Substrate project in this repository
uses the [[https://docs.substrate.io/v3/runtime/frame][FRAME]] framework
to construct a blockchain runtime. FRAME allows runtime developers to
declare domain-specific logic in modules called "pallets". At the heart
of FRAME is a helpful
[[https://docs.substrate.io/v3/runtime/macros][macro language]] that
makes it easy to create pallets and flexibly compose them to create
blockchains that can address
[[https://www.substrate.io/substrate-users/][a variety of needs]].

Review the [[./runtime/src/lib.rs][FRAME runtime implementation]]
included in this template and note the following:

- This file configures several pallets to include in the runtime. Each
  pallet configuration is defined by a code block that begins with
  =impl $PALLET_NAME::Config for Runtime=.
- The pallets are composed into a single runtime by way of the
  [[https://crates.parity.io/frame_support/macro.construct_runtime.html][=construct_runtime!=]]
  macro, which is part of the core
  [[https://docs.substrate.io/v3/runtime/frame#support-crate][FRAME
  Support]] library.

*** Pallets
:PROPERTIES:
:CUSTOM_ID: pallets
:END:
The runtime in this project is constructed using many FRAME pallets that
ship with the
[[https://github.com/paritytech/substrate/tree/master/frame][core
Substrate repository]] and a template pallet that is
[[./pallets/template/src/lib.rs][defined in the =pallets=]] directory.

A FRAME pallet is compromised of a number of blockchain primitives:

- Storage: FRAME defines a rich set of powerful
  [[https://docs.substrate.io/v3/runtime/storage][storage abstractions]]
  that makes it easy to use Substrate's efficient key-value database to
  manage the evolving state of a blockchain.
- Dispatchables: FRAME pallets define special types of functions that
  can be invoked (dispatched) from outside of the runtime in order to
  update its state.
- Events: Substrate uses
  [[https://docs.substrate.io/v3/runtime/events-and-errors][events and
  errors]] to notify users of important changes in the runtime.
- Errors: When a dispatchable fails, it returns an error.
- Config: The =Config= configuration interface is used to define the
  types and parameters upon which a FRAME pallet depends.

*** Run in Docker
:PROPERTIES:
:CUSTOM_ID: run-in-docker
:END:
First, install [[https://docs.docker.com/get-docker/][Docker]] and
[[https://docs.docker.com/compose/install/][Docker Compose]].

Then run the following command to start a single node development chain.

#+begin_src sh
./scripts/docker_run.sh
#+end_src

This command will firstly compile your code, and then start a local
development network. You can also replace the default command
(=cargo build --release && ./target/release/node-template --dev --ws-external=)
by appending your own. A few useful ones are as follow.

#+begin_src sh
# Run Substrate node without re-compiling
./scripts/docker_run.sh ./target/release/node-template --dev --ws-external

# Purge the local dev chain
./scripts/docker_run.sh ./target/release/node-template purge-chain --dev

# Check whether the code is compilable
./scripts/docker_run.sh cargo check
#+end_src

** build command
:PROPERTIES:
:CUSTOM_ID: build-command
:END:
#+begin_src shell
cargo install kickstart
kickstart https://github.com/sacha-l/kickstart-substrate
rustup target add wasm32-unknown-unknown
cargo build
#+end_src

copy from
[[https://blog.logrocket.com/custom-blockchain-implementation-rust-substrate/][How
to build a custom blockchain implementation in Rust using Substrate]]
