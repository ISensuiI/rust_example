* Rust Rocket MongoDB token-auth REST API boilerplate
:PROPERTIES:
:CUSTOM_ID: rust-rocket-mongodb-token-auth-rest-api-boilerplate
:END:
In this repository, you can find backend Rust rocket mongodb rest-api
boilerplate with token authorization.

#+begin_src rust
#[get("/public/hello")]
pub async fn hello_world() -> Json<&'static str> {
  Json("Hello world")
}
#+end_src

Visiting =localhost:8000/api/v1/public/hello=, for example, will trigger
the =hello= route resulting in the string =Hello world= being sent to
the browser. In this example there is no authorization.

** How to start
:PROPERTIES:
:CUSTOM_ID: how-to-start
:END:
1. First you need to download this repository to your computer

- Write this in your terminal:

#+begin_src sh
git clone https://github.com/martyr00/Rust-rocket-mongoDB-token-auth-REST-API-boilerplate.git
#+end_src

- After open the project in your IDE

2. [@2] You need to make your private.rs file as in the
   private.sample.rs:

#+begin_src rust
pub const JWT_SECRET: &[u8] = b"<YOUR_JWT_SECRET_KEY>";
pub const REFRESH_JWT_SECRET: &'static str = b"<YOUR_REFRESH_JWT_SECRET_KEY>";
pub(crate) const URL_DB: &str = "mongodb+srv://<YOUR_LOGIN>:<YOUR_PASSWORD>@cluster0.d5yn0.mongodb.net/<YOUR_DB_NAME>";
#+end_src

- =JWT_SECRET= and =REFRESH_JWT_SECRET= you need to come up with your
  own secret word to encrypt the tokens
- For =URL_DB= you need registration your mongoDB acc here
  https://cloud.mongodb.com/

3. [@3] To run write this in your terminal:

#+begin_src sh
cargo check && cargo run
#+end_src

** Routes
:PROPERTIES:
:CUSTOM_ID: routes
:END:
- /api/v1/registration (POST)
- /api/v1/login (POST)
- /api/v1/refresh (POST)
- /api/v1/public/hello (GET)
- /api/v1/hello (GET)
- /api/v1/public/user (DELETE, PATCH)

** Registration acc
:PROPERTIES:
:CUSTOM_ID: registration-acc
:END:
*** Registration request:
:PROPERTIES:
:CUSTOM_ID: registration-request
:END:
- =login= (must be unique && len login must be from 3 to 200 letter)
- =password= (len password must be from 8 to 200 letter and password is
  hashed before being saved to the database.)
- =mail= (must be unique and mail)
- =first_name= (len must be from 2 to 150 letter and this field is
  optional)
- =last_name= (len must be from 2 to 200 letter and this field is
  optional)

#+begin_src rust
pub struct RegistrationRequest {
    pub login: String,
    pub password: String,

    pub mail: String,

    pub first_name: String,
    pub last_name: String,
}
#+end_src

**** Example registration request:
:PROPERTIES:
:CUSTOM_ID: example-registration-request
:END:
#+begin_src json
{
    "login": "test",
    "password": "12345678",
    "mail": "test@gmail.com",
    "first_name": "Test",
    "last_name": ""
}
#+end_src

*** Registration response
:PROPERTIES:
:CUSTOM_ID: registration-response
:END:
In response, the server will send 2 JWT tokens. The =token= is valid for
1 hour. =Refresh token= is valid for 7 days. =token= is needed to verify
user authorization. With each private request, the =token= will be sent
fronted to the headers in the authorization field.

More about jwt authentication
https://blog.logrocket.com/jwt-authentication-in-rust/

**** If everything is correct:
:PROPERTIES:
:CUSTOM_ID: if-everything-is-correct
:END:
#+begin_src rust
pub struct Token {
    pub token: String,
    pub refresh_token: String,
}
#+end_src

**** Example:
:PROPERTIES:
:CUSTOM_ID: example
:END:
#+begin_src json
{
    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjJiNGRhOTk4ZjgyMzc2YTk1MzM1MWIxIiwiZXhwIjoxNjU2MDIzMjA5fQ.aJFDZVyMBuNYh5EAArYYfzYCTnHHCQ7IHuZpKNCXHs0",
    "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjJiNGRhOTk4ZjgyMzc2YTk1MzM1MWIxIiwiZXhwIjoxNjU4NjExNjA5fQ.2_DjxtQxtsLsprvhBfYU8rKAoDfWMdshoPKDUqq6QZQ"
}
#+end_src

**** Possible error:
:PROPERTIES:
:CUSTOM_ID: possible-error
:END:
- =bad login= -> Status 400 and string "Bad login" in json
- =already registered login= -> Status 400 and string "Already
  registered by login" in json
- =bad password= -> Status 400 and string "Bad password" in json
- =already registered password= -> Status 400 and string "Already
  registered by password" in json
- =bad mail= -> Status 400 and string "Bad mail" in json
- =already registered mail= -> Status 400 and string "Already registered
  by mail" in json

**** Example error:
:PROPERTIES:
:CUSTOM_ID: example-error
:END:
Status 400 Bad Request

#+begin_src json
{
    "cause": "Already registered by login"
}
#+end_src

** Login acc
:PROPERTIES:
:CUSTOM_ID: login-acc
:END:
*** Login request:
:PROPERTIES:
:CUSTOM_ID: login-request
:END:
- =login=(The server checks 2 logins from the database and the request)
- =password=(The server checks the encrypted password in the database
  with the password from the request)

#+begin_src rust
pub struct LoginRequest {
  pub login: String,
  pub password: String,
}
#+end_src

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-1
:END:
#+begin_src json
{
    "login": "test",
    "password": "12345678"
}
#+end_src

*** Login response:
:PROPERTIES:
:CUSTOM_ID: login-response
:END:
**** If everything is correct:
:PROPERTIES:
:CUSTOM_ID: if-everything-is-correct-1
:END:
#+begin_src rust
pub struct Token {
    pub token: String,
    pub refresh_token: String,
}
#+end_src

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-2
:END:
#+begin_src json
{
    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjJhM2I3Zjg4MTE1OWVkYWJmNTcwZjYwIiwiZXhwIjoxNjU2MDI0MDM1fQ.5Nu0lbN5X656JhuY8PrK1IJhWFVjHxKbh8CssKqHQqk",
    "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjJhM2I3Zjg4MTE1OWVkYWJmNTcwZjYwIiwiZXhwIjoxNjU4NjEyNDM1fQ.5OUiED1no-uizfYmq1xk6Z6XpX9TsbezDx8QxPSbyV0"
}
#+end_src

**** Possible error:
:PROPERTIES:
:CUSTOM_ID: possible-error-1
:END:
- =Bad request=(In any case)

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-3
:END:
Status 400

#+begin_src json
{
    "cause": "Wrong request"
}
#+end_src

** Refresh token
:PROPERTIES:
:CUSTOM_ID: refresh-token
:END:
In this route, the frontend asks the server to refresh the =token= with
a =refresh token= in json

*** Refresh token request
:PROPERTIES:
:CUSTOM_ID: refresh-token-request
:END:
- =refresh token=(specific user)

#+begin_src rust
pub struct RefreshToken {
    pub(crate) refresh_token: String,
}
#+end_src

**** Example refresh token request:
:PROPERTIES:
:CUSTOM_ID: example-refresh-token-request
:END:
#+begin_src json
{
    "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjJhM2I3Zjg4MTE1OWVkYWJmNTcwZjYwIiwiZXhwIjoxNjU3NDg5NDcyfQ.BcTanbs5lyT-Yv2ekf5-xl_NzEqpKsh5S59AEuZrmVQ"
}
#+end_src

*** Refresh token response
:PROPERTIES:
:CUSTOM_ID: refresh-token-response
:END:
**** If everything is correct:
:PROPERTIES:
:CUSTOM_ID: if-everything-is-correct-2
:END:
#+begin_src rust
pub struct Token {
    pub token: String,
    pub refresh_token: String,
}
#+end_src

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-4
:END:
#+begin_src json
{
    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjJhM2I3Zjg4MTE1OWVkYWJmNTcwZjYwIiwiZXhwIjoxNjU2MDI0MDM1fQ.5Nu0lbN5X656JhuY8PrK1IJhWFVjHxKbh8CssKqHQqk",
    "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNjJhM2I3Zjg4MTE1OWVkYWJmNTcwZjYwIiwiZXhwIjoxNjU4NjEyNDM1fQ.5OUiED1no-uizfYmq1xk6Z6XpX9TsbezDx8QxPSbyV0"
}
#+end_src

**** Possible error:
:PROPERTIES:
:CUSTOM_ID: possible-error-2
:END:
- =Unauthorized=

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-5
:END:
Status 400

#+begin_src json
{
    "cause": "Unauthorized"
}
#+end_src

** Public hello
:PROPERTIES:
:CUSTOM_ID: public-hello
:END:
This is the only route without authorization. Therefore there is no
request in this route.

*** Rust code:
:PROPERTIES:
:CUSTOM_ID: rust-code
:END:
#+begin_src rust
#[get("/public/hello")]
pub async fn hello_world() -> Json<&'static str> {
  Json("Hello world")
}
#+end_src

*** Response in json:
:PROPERTIES:
:CUSTOM_ID: response-in-json
:END:
#+begin_example
{
  "Hello world"
}
#+end_example

** Private hello
:PROPERTIES:
:CUSTOM_ID: private-hello
:END:
In this route, the server checks in the headers token if the token is
valid then the server executes the program.

*** Private hello request:
:PROPERTIES:
:CUSTOM_ID: private-hello-request
:END:
**** From headers:
:PROPERTIES:
:CUSTOM_ID: from-headers
:END:
=authorization= =Bearer= (TOKEN)

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-6
:END:
=authorization= =Bearer eyJ0eXAiOiJKV1QiLCJhbGci....=

*** Private hello response
:PROPERTIES:
:CUSTOM_ID: private-hello-response
:END:
the response will be a greeting with the user. If the database contains
his first name and surname, then the program will greet you by the first
name and surname; if not, the program will greet you by login

**** If everything is correct:
:PROPERTIES:
:CUSTOM_ID: if-everything-is-correct-3
:END:
#+begin_src rust
pub struct HelloNameResponse {
    pub(crate) greetings: String,
}
#+end_src

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-7
:END:
#+begin_src json
{
    "greetings": "Hello test"
}
#+end_src

**** Possible error:
:PROPERTIES:
:CUSTOM_ID: possible-error-3
:END:
- =Unauthorized=

**** Example:
:PROPERTIES:
:CUSTOM_ID: example-8
:END:
Status 401

#+begin_src json
{
"cause": "Unauthorized"
}
#+end_src
