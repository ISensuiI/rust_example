* Rod
:PROPERTIES:
:CUSTOM_ID: rod
:END:
Rust Object Database.

The decentralized social networking application
[[https://github.com/irislib/iris-messenger][Iris-messenger]] syncs over
Rod peers by default.

** Use
:PROPERTIES:
:CUSTOM_ID: use
:END:
Install
[[https://doc.rust-lang.org/book/ch01-01-installation.html][Rust]]
first.

*** Install & run
:PROPERTIES:
:CUSTOM_ID: install-run
:END:
#+begin_example
cargo install rod
rod start
#+end_example

*** Library
:PROPERTIES:
:CUSTOM_ID: library
:END:
#+begin_src rust
use rod::{Node, Config, Value};
let mut db = Node::new_with_config(Config {
    outgoing_websocket_peers: vec!["wss://some-server-to-sync.with/ws".to_string()],
    ..Config::default()
});
let mut sub = db.get("greeting").on();
db.get("greeting").put("Hello World!".into());
if let Value::Text(str) = sub.recv().await.unwrap() {
    assert_eq!(&str, "Hello World!");
}
#+end_src

** Status
:PROPERTIES:
:CUSTOM_ID: status
:END:
15/5/2022:

- [X] Basic
- [X] CLI for running the server
- [X] Incoming websockets
- [X] Outgoing websockets (env
  PEERS=wss://some-server-url.herokuapp.com/ws)
- [X] Multicast (currently size limited to 65KB --- large photos in
  messages will not sync over it)
- [X] In-memory storage
- [X] TLS support (env CERT_PATH and KEY_PATH)
- [X] Advanced deduplication of network messages
- [X] Publish & subscribe (network messages only relayed to relevant
  peers)
- [X] Disk storage ([[https://sled.rs][sled.rs]])
- [X] Hash verification for content-addressed data
  (=db.get('#').get(data_hash).put(data)=)
- [X] Signature verification of user data
  (=db.get('~' + pubkey).get('profile') ...=)
- [ ] Encryption & decryption (usually not needed on the server, but
  used on the client side in js, like
  [[https://github.com/iris-lib/iris-messenger][iris]] private
  messaging)

*** Issues
:PROPERTIES:
:CUSTOM_ID: issues
:END:
- Multicast doesn't relay large messages like Iris posts with photos

** Develop
:PROPERTIES:
:CUSTOM_ID: develop
:END:
#+begin_example
cargo install cargo-watch
RUST_LOG=debug cargo watch -x 'run -- start'
#+end_example

#+begin_example
cargo test
#+end_example

#+begin_example
cargo bench
#+end_example

** Run on Heroku
:PROPERTIES:
:CUSTOM_ID: run-on-heroku
:END:
#+begin_example
heroku create --buildpack emk/rust
git push heroku master
#+end_example

or:

[[https://heroku.com/deploy?template=https://github.com/mmalmi/rod][[[file:assets/herokubutton.svg]]]]
